(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TestCounter {
    constructor() {
        this.n = 0;
    }
    getNumber() {
        return this.n;
    }
    setNumber(n) {
        this.n = n;
    }
}
exports.default = TestCounter;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Input {
    constructor() {
        this.initializeInputs();
        this.upKeyDown = false;
        this.leftKeyDown = false;
        this.rightKeyDown = false;
    }
    initializeInputs() {
        document.addEventListener('keydown', (ev) => {
            if (ev.keyCode === 37) {
                this.leftKeyDown = true;
            }
            else if (ev.keyCode === 39) {
                this.rightKeyDown = true;
            }
            else if (ev.keyCode === 38) {
                this.upKeyDown = true;
            }
        });
        document.addEventListener('keyup', (ev) => {
            if (ev.keyCode === 37) {
                this.leftKeyDown = false;
            }
            else if (ev.keyCode === 38) {
                this.upKeyDown = false;
            }
            else if (ev.keyCode === 39) {
                this.rightKeyDown = false;
            }
        });
    }
}
exports.default = Input;
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Level {
    constructor(imgdir, message, location, canvas) {
        this.background = new Image(canvas.width, canvas.height);
        this.background.src = imgdir;
        this.message = message;
        this.location = location;
    }
}
exports.default = Level;
},{}],4:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TestCounter_1 = __importDefault(require("./app/TestCounter"));
const Input_1 = __importDefault(require("./input/Input"));
const Entity_1 = __importDefault(require("./obj/Entity"));
const Level_1 = __importDefault(require("./level/Level"));
const RENDER_CANVAS_ID = 'renderCanvas';
const MESSAGE_PARAGRAPH_ID = 'flavourText';
const LOCATION_ID = 'location';
let x = new TestCounter_1.default();
let canvas = document.getElementById(RENDER_CANVAS_ID);
let gameText = document.getElementById(MESSAGE_PARAGRAPH_ID);
let locationHeader = document.getElementById(LOCATION_ID);
let r = canvas.getContext('2d');
let counter = 0;
let keyboard;
let character;
let background;
let message;
function init() {
    canvas.width = 800;
    canvas.height = 400;
    keyboard = new Input_1.default();
    character = new Entity_1.default('res/sprite/walk-left.png', 'res/sprite/walk-right.png', 150, 250);
    r.font = '12px Arial black';
    loadLevel('res/blockbuster-interior.jpg', 'You are in blockbuster');
}
function loadLevel(dir, message) {
    character.setX(canvas.width / 2 - character.getWidth() / 2);
    let level = new Level_1.default(dir, message, 'Blockbuster', canvas);
    background = level.background;
    message = level.message;
    gameText.textContent = message;
    locationHeader.textContent = level.location;
}
function loop() {
    ++counter;
    r.clearRect(0, 0, 800, 400);
    r.fillText(counter.toString(), 10, 10);
    character.tick(canvas.width, canvas.height);
    if (keyboard.leftKeyDown) {
        character.accelerateLeft(3);
    }
    else if (keyboard.rightKeyDown) {
        character.accelerateRight(3);
    }
    if (keyboard.upKeyDown) {
        character.accelerateUp(40);
    }
    r.drawImage(background, 0, -250);
    r.drawImage(character.getImageSource(), character.getX(), character.getY(), character.getWidth(), character.getHeight());
    // Detect to switch level
    if (character.leftWallTouched()) {
        console.log("Left wall touched");
    }
    else if (character.rightWallTouched()) {
        console.log("Right wall touched");
    }
    requestAnimationFrame(loop);
}
init();
loop();
},{"./app/TestCounter":1,"./input/Input":2,"./level/Level":3,"./obj/Entity":5}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Entity {
    constructor(src_left, src_right, x_size, y_size) {
        this.GRAVITY = 9.81;
        this.MAX_VELOCITY = 7;
        this.x = 0;
        this.y = 0;
        this.dx = 0;
        this.dy = 0;
        this.image = new Image(x_size, y_size);
        this.image.src = src_left;
        this.x_size = x_size;
        this.y_size = y_size;
        this.hasJumped = true;
        this.isLeftWallTouched = false;
        this.isRightWallTouched = false;
        this.leftWalking_src = src_left;
        this.rightWalking_src = src_right;
    }
    leftWallTouched() {
        return this.isLeftWallTouched;
    }
    rightWallTouched() {
        return this.isRightWallTouched;
    }
    tick(x_max, y_max) {
        this.x += this.dx;
        this.dy += this.GRAVITY;
        if (this.x + this.image.width > x_max) {
            // Right wall
            this.isRightWallTouched = true;
            this.x = x_max - this.image.width;
        }
        else if (this.x < 0) {
            this.isLeftWallTouched = true;
            this.x = 0;
        }
        else {
            this.isRightWallTouched = false;
            this.isLeftWallTouched = false;
        }
        this.y += this.dy;
        // Hit the ground
        if (this.y + this.y_size >= y_max) {
            this.y = y_max - this.y_size;
            this.dy = 0;
            this.hasJumped = false;
        }
        // Friction
        if (this.dx > 0) {
            // Going right
            this.image.src = this.rightWalking_src;
            --this.dx;
        }
        if (this.dx < 0) {
            // Going left
            this.image.src = this.leftWalking_src;
            ++this.dx;
        }
        else {
        }
    }
    getWidth() {
        return this.x_size;
    }
    getHeight() {
        return this.y_size;
    }
    getImageSource() {
        return this.image;
    }
    accelerateLeft(speed) {
        this.dx -= speed;
        if (this.dx < -this.MAX_VELOCITY) {
            this.dx = -this.MAX_VELOCITY;
        }
    }
    accelerateRight(speed) {
        this.dx += speed;
        if (this.dx > this.MAX_VELOCITY) {
            this.dx = this.MAX_VELOCITY;
        }
    }
    accelerateUp(speed) {
        if (!this.hasJumped) {
            this.hasJumped = true;
            this.dy -= speed;
        }
    }
    setX(x) {
        this.x = x;
    }
    setY(y) {
        this.y = y;
    }
    getX() {
        return this.x;
    }
    getY() {
        return this.y;
    }
    getYLower() {
        return this.image.height + this.y;
    }
}
exports.default = Entity;
},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
